{
  "version": "Notebook/1.0",
  "items": [
    {
      "type": 1,
      "content": {
        "json": "# Azure Arc Connected Agent - for Defender for Server with multi-cloud deployments\r\n### Microsoft Defender for Servers plans require Azure Arc deployment on AWS/GCP machines. \r\nThis interactive workbook provides an overview of machines in your environment showing their Azure ARC Connected Machine agent deployment status."
      },
      "name": "textDescriptionOfWorkbook"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{Subscriptions}"
        ],
        "parameters": [
          {
            "id": "11c6e8cc-282f-4e7d-a01e-fb8f5506c3a2",
            "version": "KqlParameterItem/1.0",
            "name": "Subscriptions",
            "type": 6,
            "description": "Please select one or several subscriptions",
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "includeAll": false,
              "showDefault": false
            },
            "timeContext": {
              "durationMs": 86400000
            },
            "defaultValue": "value::all",
            "value": [
              "value::all"
            ]
          },
          {
            "id": "ec9d7c56-e65e-47ae-a289-d37dd9d1ee49",
            "version": "KqlParameterItem/1.0",
            "name": "AWSSecurityConnectors",
            "label": "AWS account",
            "type": 2,
            "description": "Please select one or several AWS security connectors to allow the workbook to refelect Arc agent",
            "isRequired": true,
            "multiSelect": true,
            "quote": "",
            "delimiter": ",",
            "query": "resources\r\n| where type == \"microsoft.security/securityconnectors\"\r\n| extend environmentName = tolower(tostring(properties['environmentName']))\r\n| extend hierarchyIdentifier = tostring(properties['hierarchyIdentifier'])\r\n| where environmentName == \"aws\"\r\n| project value = id, label = strcat(hierarchyIdentifier,\" (\",name,\")\")",
            "crossComponentResources": [
              "{Subscriptions}"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "showDefault": false
            },
            "timeContext": {
              "durationMs": 86400000
            },
            "defaultValue": "value::all",
            "queryType": 1,
            "resourceType": "microsoft.resourcegraph/resources",
            "value": [
              "value::all"
            ]
          },
          {
            "id": "1296c8b8-4305-4a39-a08a-b3cc9fceff03",
            "version": "KqlParameterItem/1.0",
            "name": "GCPSecuityConnectors",
            "label": "GCP Project",
            "type": 2,
            "description": "Please select one or several GCP security connectors to allow the workbook to refelect Arc agent",
            "isRequired": true,
            "multiSelect": true,
            "quote": "",
            "delimiter": ",",
            "query": "resources\r\n| where type == \"microsoft.security/securityconnectors\"\r\n| extend environmentName = tolower(tostring(properties['environmentName']))\r\n| extend hierarchyIdentifier = tostring(properties['hierarchyIdentifier'])\r\n| where environmentName == \"gcp\"\r\n| project value = id, label = strcat(hierarchyIdentifier,\" (\",name,\")\")",
            "crossComponentResources": [
              "{Subscriptions}"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "showDefault": false
            },
            "defaultValue": "value::all",
            "queryType": 1,
            "resourceType": "microsoft.resourcegraph/resources",
            "value": [
              "value::all"
            ]
          }
        ],
        "style": "pills",
        "queryType": 1,
        "resourceType": "microsoft.resourcegraph/resources"
      },
      "name": "parametersOfWorkBook"
    },
    {
      "type": 11,
      "content": {
        "version": "LinkItem/1.0",
        "style": "tabs",
        "links": [
          {
            "id": "ebbeddcc-ba58-4fed-ab79-d27446ca80c9",
            "cellValue": "SelectedTab",
            "linkTarget": "parameter",
            "linkLabel": "AWS Account",
            "subTarget": "AWS",
            "style": "link"
          },
          {
            "id": "e2b52ae9-03d2-40e2-98bf-753a2297dbc7",
            "cellValue": "SelectedTab",
            "linkTarget": "parameter",
            "linkLabel": "GCP Project",
            "subTarget": "GCP",
            "style": "link"
          }
        ]
      },
      "name": "linksTabSplit"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 1,
            "content": {
              "json": "## EC2 machines with Arc deployment"
            },
            "name": "textDescAWSIncludeArc"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "securityresources\r\n| where subscriptionId == subscriptionId\r\n| where type == \"microsoft.security/assessments\"                        \r\n| extend resourceDetails = properties.resourceDetails, additionalData = properties.additionalData\r\n| extend source = (// AssessmentsQueryBuilder.columnDefinitions.source\r\n                iff(type == \"microsoft.security/assessments\", trim(' ', tolower(tostring(properties.resourceDetails.Source))), dynamic(null)))\r\n| extend classificationResource = iff(type == \"microsoft.security/insights\" and id contains \"microsoft.security/insights/classification\", true , false)\r\n| extend multiCloudSource = iff(source == \"aws\" or source == \"gcp\", true, false)\r\n| extend resourceId = trim(\" \", tolower(tostring(case(source == \"azure\", resourceDetails.Id,\r\n                                                                    multiCloudSource == true and isnotempty(tostring(resourceDetails.ConnectorId)), resourceDetails.Id,\r\n                                                                    multiCloudSource == true and type == \"microsoft.security/softwareinventories\", extract(\"^(.+)/providers/microsoft.security/softwareinventories/.+$\",1,id),\r\n                                                                    multiCloudSource == true, resourceDetails.AzureResourceId,\r\n                                                                    source == \"onpremise\", strcat(extract(\"^(.+)/(.+)/onpremisemachines/(.+)/providers/microsoft.security/assessments/.+$\",1,id),\"/workspacenameplaceholder/onpremisemachines/\", resourceDetails.MachineName,\"_\", resourceDetails.VMUUID),\r\n                                                                    type == \"microsoft.security/assessments\", extract(\"^(?i)(.+)/providers/Microsoft.Security/assessments/.+$\",1,id),\r\n                                                                    classificationResource == true, tolower(properties.associatedResource),\r\n                                                                    extract(\"^(.+)/providers/microsoft.security/softwareinventories/.+$\",1,id)))))\r\n| extend extractedResourceName = extract(@\"(.+)/(.+)\", 2, resourceId)\r\n| extend resourceName = iff(multiCloudSource == true and isnotempty(tostring(resourceDetails.ConnectorId)), tostring(additionalData.ResourceName), extractedResourceName)\r\n| extend resourceName = iff(multiCloudSource == true and resourceId contains \"/securityentitydata/aws-ecr-repository\", trim(\"aws-ecr-repository-\", substring(extractedResourceName, 0, strlen(extractedResourceName) - indexof(reverse(extractedResourceName),'-',1,-1,3) - 1)), resourceName)\r\n| extend resourceName = iff(multiCloudSource == true and resourceId contains \"/securityentitydata/gcp-gar-repository\", tostring(additionalData.resourceName), resourceName)\r\n| extend resourceName = iff(multiCloudSource == true and type == \"microsoft.security/softwareinventories\", case(source == \"aws\", extract(\"aws-ec2-instance-(i-.+?)-(.+)$\", 1, extractedResourceName),\r\n                                                                                                                                source == \"gcp\", extract(\"gcp-instances-(.+?)-(.+)$\", 1, extractedResourceName),\r\n                                                                                                                                extractedResourceName),\r\n                                            resourceName)\r\n| extend resourceName = iff(isnotempty(additionalData.EnvironmentDisplayName) and tostring(additionalData.ResourceType) in (\"account\", \"account-in-region\") and source == \"aws\", additionalData.EnvironmentDisplayName, resourceName)\r\n| extend resourceName = iff(classificationResource == true and resourceId contains \"/securityentitydata/aws-s3\", trim(\"aws-s3-\", resourceName), resourceName)\r\n| extend resourceName = iff((resourceId contains \"/apicollectiondetails/\") and (resourceId contains \"/apicollections/\"), additionalData.ResourceName, resourceName)\r\n| extend resourceName = iff((resourceId contains \"/mdeservers/\"), substring(extractedResourceName, 0, strlen(extractedResourceName) - indexof(reverse(extractedResourceName), \"_\", 0, -1) - 1), resourceName)\r\n| extend typeFullPath = (// AssessmentsQueryBuilder.columnDefinitions.typeFullPath\r\n                iff(type == \"microsoft.security/assessments\", tolower(properties.resourceDetails.ResourceType), dynamic(null)))\r\n| extend resourceType = typeFullPath\r\n| extend assessmentKey = iff(type == \"microsoft.security/assessments\", tostring(name), \"\")\r\n                // Filter for installedSoftware,installedSoftwareVersions not enabled\r\n| extend environment = tolower(tostring(resourceDetails[\"Source\"]))\r\n| extend environment = iff(environment == \"onpremise\", \"non-azure\", environment)\r\n                // Filter for awsAccount,gcpProject not enabled\r\n| extend osType = tostring(additionalData[\"OS Type\"])\r\n| where tolower(environment) in ('aws')                 \r\n| summarize\r\n                    resourceType = max(resourceType),\r\n                    typeFullPath = max(resourceType),\r\n                    resourceName = max(resourceName),\r\n                    name = max(name),\r\n                    environment = max(environment),\r\n                    osType = max(osType)                    \r\n                    by resourceId, subscriptionId\r\n| extend subscriptionPricing = dynamic(null), pricing = \"\"\r\n| extend selectedSecurityConnectors =  tolower('{AWSSecurityConnectors}')\r\n| extend securityConnectorId = tolower(tostring(split(resourceId,\"/securityentitydata/\")[0]))\r\n| where isnotempty(securityConnectorId)\r\n| where selectedSecurityConnectors has securityConnectorId\r\n| project  resourceName, resourceType,\r\n                            resourceId,                            \r\n                            environment,\r\n                            subscriptionId\r\n| extend resourceGroup = tolower(tostring(split(resourceId, \"/\")[4]))\r\n| order by resourceId, resourceName\r\n| where resourceType in ('microsoft.security/securityconnectors/ec2instance')\r\n| join kind = inner\r\n\t(resources\r\n    | where subscriptionId == subscriptionId\r\n\t| where type == 'microsoft.hybridcompute/machines'\r\n    | extend state = properties.status\r\n    | extend status = case(\r\n    state =~ 'Connected', 'Connected',\r\n    state =~ 'Disconnected', 'Offline',\r\n    state =~ 'Error', 'Error',\r\n    state =~ 'Expired', 'Expired',\r\n    '')\r\n\t| project name, ComputerName = tostring(properties.osProfile.computerName), OSName = tostring(properties.osName), status\r\n)  on $left.resourceName == $right.name",
              "size": 0,
              "queryType": 1,
              "resourceType": "microsoft.resourcegraph/resources",
              "crossComponentResources": [
                "value::selected"
              ],
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "name",
                    "formatter": 5
                  }
                ]
              }
            },
            "name": "querySecurityResource&Resource-ArcInclude-AWS"
          },
          {
            "type": 1,
            "content": {
              "json": "## EC2 machines without Arc deployment"
            },
            "name": "textDescAWSExclude"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "securityresources\r\n| where subscriptionId == subscriptionId\r\n| where type == \"microsoft.security/assessments\"                        \r\n| extend resourceDetails = properties.resourceDetails, additionalData = properties.additionalData\r\n| extend source = (// AssessmentsQueryBuilder.columnDefinitions.source\r\n                iff(type == \"microsoft.security/assessments\", trim(' ', tolower(tostring(properties.resourceDetails.Source))), dynamic(null)))\r\n| extend classificationResource = iff(type == \"microsoft.security/insights\" and id contains \"microsoft.security/insights/classification\", true , false)\r\n| extend multiCloudSource = iff(source == \"aws\" or source == \"gcp\", true, false)\r\n| extend resourceId = trim(\" \", tolower(tostring(case(source == \"azure\", resourceDetails.Id,\r\n                                                                    multiCloudSource == true and isnotempty(tostring(resourceDetails.ConnectorId)), resourceDetails.Id,\r\n                                                                    multiCloudSource == true and type == \"microsoft.security/softwareinventories\", extract(\"^(.+)/providers/microsoft.security/softwareinventories/.+$\",1,id),\r\n                                                                    multiCloudSource == true, resourceDetails.AzureResourceId,\r\n                                                                    source == \"onpremise\", strcat(extract(\"^(.+)/(.+)/onpremisemachines/(.+)/providers/microsoft.security/assessments/.+$\",1,id),\"/workspacenameplaceholder/onpremisemachines/\", resourceDetails.MachineName,\"_\", resourceDetails.VMUUID),\r\n                                                                    type == \"microsoft.security/assessments\", extract(\"^(?i)(.+)/providers/Microsoft.Security/assessments/.+$\",1,id),\r\n                                                                    classificationResource == true, tolower(properties.associatedResource),\r\n                                                                    extract(\"^(.+)/providers/microsoft.security/softwareinventories/.+$\",1,id)))))\r\n| extend extractedResourceName = extract(@\"(.+)/(.+)\", 2, resourceId)\r\n| extend resourceName = iff(multiCloudSource == true and isnotempty(tostring(resourceDetails.ConnectorId)), tostring(additionalData.ResourceName), extractedResourceName)\r\n| extend resourceName = iff(multiCloudSource == true and resourceId contains \"/securityentitydata/aws-ecr-repository\", trim(\"aws-ecr-repository-\", substring(extractedResourceName, 0, strlen(extractedResourceName) - indexof(reverse(extractedResourceName),'-',1,-1,3) - 1)), resourceName)\r\n| extend resourceName = iff(multiCloudSource == true and resourceId contains \"/securityentitydata/gcp-gar-repository\", tostring(additionalData.resourceName), resourceName)\r\n| extend resourceName = iff(multiCloudSource == true and type == \"microsoft.security/softwareinventories\", case(source == \"aws\", extract(\"aws-ec2-instance-(i-.+?)-(.+)$\", 1, extractedResourceName),\r\n                                                                                                                                source == \"gcp\", extract(\"gcp-instances-(.+?)-(.+)$\", 1, extractedResourceName),\r\n                                                                                                                                extractedResourceName),\r\n                                            resourceName)\r\n| extend resourceName = iff(isnotempty(additionalData.EnvironmentDisplayName) and tostring(additionalData.ResourceType) in (\"account\", \"account-in-region\") and source == \"aws\", additionalData.EnvironmentDisplayName, resourceName)\r\n| extend resourceName = iff(classificationResource == true and resourceId contains \"/securityentitydata/aws-s3\", trim(\"aws-s3-\", resourceName), resourceName)\r\n| extend resourceName = iff((resourceId contains \"/apicollectiondetails/\") and (resourceId contains \"/apicollections/\"), additionalData.ResourceName, resourceName)\r\n| extend resourceName = iff((resourceId contains \"/mdeservers/\"), substring(extractedResourceName, 0, strlen(extractedResourceName) - indexof(reverse(extractedResourceName), \"_\", 0, -1) - 1), resourceName)\r\n| extend name = resourceName\r\n| extend typeFullPath = (// AssessmentsQueryBuilder.columnDefinitions.typeFullPath\r\n                iff(type == \"microsoft.security/assessments\", tolower(properties.resourceDetails.ResourceType), dynamic(null)))\r\n| extend resourceType = typeFullPath\r\n| extend environment = tolower(tostring(resourceDetails[\"Source\"]))\r\n| extend environment = iff(environment == \"onpremise\", \"non-azure\", environment)\r\n| extend osType = tostring(additionalData[\"OS Type\"])\r\n| where tolower(environment) in ('aws') \r\n| summarize\r\n                    resourceType = max(resourceType),\r\n                    typeFullPath = max(resourceType),\r\n                    resourceName = max(resourceName),\r\n                    name = max(name),\r\n                    environment = max(environment),\r\n                    osType = max(osType)\r\n                    by resourceId, subscriptionId\r\n| extend subscriptionPricing = dynamic(null), pricing = \"\"\r\n| extend selectedSecurityConnectors =  tolower('{AWSSecurityConnectors}')\r\n| extend securityConnectorId = tolower(tostring(split(resourceId,\"/securityentitydata/\")[0]))\r\n| where isnotempty(securityConnectorId)\r\n| where selectedSecurityConnectors has securityConnectorId\r\n| project  resourceName, resourceType,\r\n                            resourceId,                            \r\n                            environment,\r\n                            subscriptionId\r\n| extend resourceGroup = tolower(tostring(split(resourceId, \"/\")[4]))\r\n| order by resourceId, resourceName\r\n| where resourceType in ('microsoft.security/securityconnectors/ec2instance')\r\n| join kind = leftouter\r\n\t(resources\r\n\t| where type == 'microsoft.hybridcompute/machines'\r\n\t| project name\r\n)  on $left.resourceName == $right.name\r\n| where name == ''",
              "size": 0,
              "queryType": 1,
              "resourceType": "microsoft.resourcegraph/resources",
              "crossComponentResources": [
                "value::selected"
              ],
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "name",
                    "formatter": 5
                  }
                ]
              }
            },
            "name": "querySecurityResource&Resource-ArcExclude-AWS"
          }
        ]
      },
      "conditionalVisibility": {
        "parameterName": "SelectedTab",
        "comparison": "isEqualTo",
        "value": "AWS"
      },
      "name": "AWS"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 1,
            "content": {
              "json": "## Virtual Machines with Arc deployment"
            },
            "name": "textDescGCPIncludeArc"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "securityresources\r\n| where subscriptionId == subscriptionId\r\n| where type == \"microsoft.security/assessments\"\r\n| extend resourceDetails = properties.resourceDetails, additionalData = properties.additionalData\r\n| extend source = (// AssessmentsQueryBuilder.columnDefinitions.source\r\n                iff(type == \"microsoft.security/assessments\", trim(' ', tolower(tostring(properties.resourceDetails.Source))), dynamic(null)))\r\n| extend classificationResource = iff(type == \"microsoft.security/insights\" and id contains \"microsoft.security/insights/classification\", true , false)\r\n| extend multiCloudSource = iff(source == \"aws\" or source == \"gcp\", true, false)\r\n| extend resourceId = trim(\" \", tolower(tostring(case(source == \"azure\", resourceDetails.Id,\r\n                                                                    multiCloudSource == true and isnotempty(tostring(resourceDetails.ConnectorId)), resourceDetails.Id,\r\n                                                                    multiCloudSource == true and type == \"microsoft.security/softwareinventories\", extract(\"^(.+)/providers/microsoft.security/softwareinventories/.+$\",1,id),\r\n                                                                    multiCloudSource == true, resourceDetails.AzureResourceId,\r\n                                                                    source == \"onpremise\", strcat(extract(\"^(.+)/(.+)/onpremisemachines/(.+)/providers/microsoft.security/assessments/.+$\",1,id),\"/workspacenameplaceholder/onpremisemachines/\", resourceDetails.MachineName,\"_\", resourceDetails.VMUUID),\r\n                                                                    type == \"microsoft.security/assessments\", extract(\"^(?i)(.+)/providers/Microsoft.Security/assessments/.+$\",1,id),\r\n                                                                    classificationResource == true, tolower(properties.associatedResource),\r\n                                                                    extract(\"^(.+)/providers/microsoft.security/softwareinventories/.+$\",1,id)))))\r\n| extend extractedResourceName = extract(@\"(.+)/(.+)\", 2, resourceId)\r\n| extend resourceName = iff(multiCloudSource == true and isnotempty(tostring(resourceDetails.ConnectorId)), tostring(additionalData.ResourceName), extractedResourceName)\r\n| extend resourceName = iff(multiCloudSource == true and resourceId contains \"/securityentitydata/aws-ecr-repository\", trim(\"aws-ecr-repository-\", substring(extractedResourceName, 0, strlen(extractedResourceName) - indexof(reverse(extractedResourceName),'-',1,-1,3) - 1)), resourceName)\r\n| extend resourceName = iff(multiCloudSource == true and resourceId contains \"/securityentitydata/gcp-gar-repository\", tostring(additionalData.resourceName), resourceName)\r\n| extend resourceName = iff(multiCloudSource == true and type == \"microsoft.security/softwareinventories\", case(source == \"aws\", extract(\"aws-ec2-instance-(i-.+?)-(.+)$\", 1, extractedResourceName),\r\n                                                                                                                                source == \"gcp\", extract(\"gcp-instances-(.+?)-(.+)$\", 1, extractedResourceName),\r\n                                                                                                                                extractedResourceName),\r\n                                            resourceName)\r\n| extend resourceName = iff(isnotempty(additionalData.EnvironmentDisplayName) and tostring(additionalData.ResourceType) in (\"account\", \"account-in-region\") and source == \"aws\", additionalData.EnvironmentDisplayName, resourceName)\r\n| extend resourceName = iff(classificationResource == true and resourceId contains \"/securityentitydata/aws-s3\", trim(\"aws-s3-\", resourceName), resourceName)\r\n| extend resourceName = iff((resourceId contains \"/apicollectiondetails/\") and (resourceId contains \"/apicollections/\"), additionalData.ResourceName, resourceName)\r\n| extend resourceName = iff((resourceId contains \"/mdeservers/\"), substring(extractedResourceName, 0, strlen(extractedResourceName) - indexof(reverse(extractedResourceName), \"_\", 0, -1) - 1), resourceName)\r\n| extend typeFullPath = (// AssessmentsQueryBuilder.columnDefinitions.typeFullPath\r\n                iff(type == \"microsoft.security/assessments\", tolower(properties.resourceDetails.ResourceType), dynamic(null)))\r\n| extend resourceType = typeFullPath\r\n| extend environment = tolower(tostring(resourceDetails[\"Source\"]))\r\n| extend environment = iff(environment == \"onpremise\", \"non-azure\", environment)\r\n| extend osType = tostring(additionalData[\"OS Type\"])\r\n| where tolower(environment) in ('gcp') \r\n| summarize\r\n                    resourceType = max(resourceType),\r\n                    typeFullPath = max(resourceType),\r\n                    resourceName = max(resourceName),\r\n                    environment = max(environment),\r\n                    osType = max(osType)\r\n                        by resourceId, subscriptionId\r\n| extend subscriptionPricing = dynamic(null), pricing = \"\"                \r\n| extend selectedSecurityConnectors =  tolower('{GCPSecuityConnectors}')\r\n| extend securityConnectorId = tolower(tostring(split(resourceId,\"/securityentitydata/\")[0]))\r\n| where isnotempty(securityConnectorId)\r\n| where isnotempty(resourceName)\r\n| where selectedSecurityConnectors has securityConnectorId\r\n| project   resourceName, resourceType,\r\n                            resourceId,                            \r\n                            environment,subscriptionId\r\n| extend resourceGroup = tolower(tostring(split(resourceId, \"/\")[4]))\r\n| order by resourceId, resourceName\r\n| where resourceType in ('microsoft.security/securityconnectors/computeinstances')\r\n| join kind = inner\r\n\t(resources\r\n\t| where type == 'microsoft.hybridcompute/machines'\r\n    | extend state = properties.status\r\n    | extend status = case(\r\n    state =~ 'Connected', 'Connected',\r\n    state =~ 'Disconnected', 'Offline',\r\n    state =~ 'Error', 'Error',\r\n    state =~ 'Expired', 'Expired',\r\n    '')    \r\n    | extend ComputerName = tostring(properties.osProfile.computerName)\r\n\t| project name, ComputerName, OSName = tostring(properties.osName), status\r\n)  on $left.resourceName==$right.ComputerName",
              "size": 0,
              "queryType": 1,
              "resourceType": "microsoft.resourcegraph/resources",
              "crossComponentResources": [
                "value::selected"
              ],
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "name",
                    "formatter": 5
                  }
                ]
              },
              "sortBy": []
            },
            "name": "querySecurityResource&Resource-ArcInclude-GCP"
          },
          {
            "type": 1,
            "content": {
              "json": "## Virtual Machines without Arc deployment"
            },
            "name": "textDescGCPExcludeArc"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "securityresources\r\n| where subscriptionId == subscriptionId\r\n| where type == \"microsoft.security/assessments\"                        \r\n| extend assessmentStatusCode = tolower(tostring(properties.status.code)), id = tolower(id)\r\n| extend severity = iff(assessmentStatusCode == \"unhealthy\", tolower(tostring(properties.metadata.severity)), assessmentStatusCode)\r\n| extend resourceDetails = properties.resourceDetails, additionalData = properties.additionalData\r\n| extend source = (// AssessmentsQueryBuilder.columnDefinitions.source\r\n                iff(type == \"microsoft.security/assessments\", trim(' ', tolower(tostring(properties.resourceDetails.Source))), dynamic(null)))\r\n| extend classificationResource = iff(type == \"microsoft.security/insights\" and id contains \"microsoft.security/insights/classification\", true , false)\r\n| extend multiCloudSource = iff(source == \"aws\" or source == \"gcp\", true, false)\r\n| extend resourceId = trim(\" \", tolower(tostring(case(source == \"azure\", resourceDetails.Id,\r\n                                                                    multiCloudSource == true and isnotempty(tostring(resourceDetails.ConnectorId)), resourceDetails.Id,\r\n                                                                    multiCloudSource == true and type == \"microsoft.security/softwareinventories\", extract(\"^(.+)/providers/microsoft.security/softwareinventories/.+$\",1,id),\r\n                                                                    multiCloudSource == true, resourceDetails.AzureResourceId,\r\n                                                                    source == \"onpremise\", strcat(extract(\"^(.+)/(.+)/onpremisemachines/(.+)/providers/microsoft.security/assessments/.+$\",1,id),\"/workspacenameplaceholder/onpremisemachines/\", resourceDetails.MachineName,\"_\", resourceDetails.VMUUID),\r\n                                                                    type == \"microsoft.security/assessments\", extract(\"^(?i)(.+)/providers/Microsoft.Security/assessments/.+$\",1,id),\r\n                                                                    classificationResource == true, tolower(properties.associatedResource),\r\n                                                                    extract(\"^(.+)/providers/microsoft.security/softwareinventories/.+$\",1,id)))))\r\n| extend extractedResourceName = extract(@\"(.+)/(.+)\", 2, resourceId)\r\n| extend resourceName = iff(multiCloudSource == true and isnotempty(tostring(resourceDetails.ConnectorId)), tostring(additionalData.ResourceName), extractedResourceName)\r\n| extend resourceName = iff(multiCloudSource == true and resourceId contains \"/securityentitydata/aws-ecr-repository\", trim(\"aws-ecr-repository-\", substring(extractedResourceName, 0, strlen(extractedResourceName) - indexof(reverse(extractedResourceName),'-',1,-1,3) - 1)), resourceName)\r\n| extend resourceName = iff(multiCloudSource == true and resourceId contains \"/securityentitydata/gcp-gar-repository\", tostring(additionalData.resourceName), resourceName)\r\n| extend resourceName = iff(multiCloudSource == true and type == \"microsoft.security/softwareinventories\", case(source == \"aws\", extract(\"aws-ec2-instance-(i-.+?)-(.+)$\", 1, extractedResourceName),\r\n                                                                                                                                source == \"gcp\", extract(\"gcp-instances-(.+?)-(.+)$\", 1, extractedResourceName),\r\n                                                                                                                                extractedResourceName),\r\n                                            resourceName)\r\n| extend resourceName = iff(isnotempty(additionalData.EnvironmentDisplayName) and tostring(additionalData.ResourceType) in (\"account\", \"account-in-region\") and source == \"aws\", additionalData.EnvironmentDisplayName, resourceName)\r\n| extend resourceName = iff(classificationResource == true and resourceId contains \"/securityentitydata/aws-s3\", trim(\"aws-s3-\", resourceName), resourceName)\r\n| extend resourceName = iff((resourceId contains \"/apicollectiondetails/\") and (resourceId contains \"/apicollections/\"), additionalData.ResourceName, resourceName)\r\n| extend resourceName = iff((resourceId contains \"/mdeservers/\"), substring(extractedResourceName, 0, strlen(extractedResourceName) - indexof(reverse(extractedResourceName), \"_\", 0, -1) - 1), resourceName)\r\n| extend typeFullPath = (// AssessmentsQueryBuilder.columnDefinitions.typeFullPath\r\n                iff(type == \"microsoft.security/assessments\", tolower(properties.resourceDetails.ResourceType), dynamic(null)))\r\n| extend resourceType = typeFullPath\r\n| extend assessmentKey = iff(type == \"microsoft.security/assessments\", tostring(name), \"\")\r\n                // Filter for installedSoftware,installedSoftwareVersions not enabled\r\n| extend environment = tolower(tostring(resourceDetails[\"Source\"]))\r\n| extend environment = iff(environment == \"onpremise\", \"non-azure\", environment)\r\n                // Filter for awsAccount,gcpProject not enabled\r\n| extend osType = tostring(additionalData[\"OS Type\"])\r\n| where tolower(environment) in ('gcp') \r\n| summarize\r\n                    resourceType = max(resourceType),\r\n                    typeFullPath = max(resourceType),\r\n                    resourceName = max(resourceName),                    \r\n                    assessmentsCount = dcount(assessmentKey),\r\n                    notApplicableAssessmentsCount = countif(severity == \"notapplicable\"),\r\n                    lowSeverityAssessmentsCount = countif(severity == \"low\"),\r\n                    mediumSeverityAssessmentsCount = countif(severity == \"medium\"),\r\n                    highSeverityAssessmentsCount = countif(severity == \"high\"),\r\n                    healthyAssessmentsCount = countif(severity == \"healthy\"),                    \r\n                    environment = max(environment),                    \r\n                    osType = max(osType)\r\n                    by resourceId, subscriptionId\r\n| extend assessmentsSummary = pack(\r\n                                                \"notapplicable\", notApplicableAssessmentsCount,\r\n                                                \"low\", lowSeverityAssessmentsCount,\r\n                                                \"medium\", mediumSeverityAssessmentsCount,\r\n                                                \"high\", highSeverityAssessmentsCount,\r\n                                                \"healthy\", healthyAssessmentsCount)\r\n| extend subscriptionPricing = dynamic(null), pricing = \"\"                \r\n| extend unhealthyAssessmentsCount = lowSeverityAssessmentsCount + mediumSeverityAssessmentsCount + highSeverityAssessmentsCount                \r\n| extend selectedSecurityConnectors =  tolower('{GCPSecuityConnectors}')\r\n| extend securityConnectorId = tolower(tostring(split(resourceId,\"/securityentitydata/\")[0]))\r\n| where isnotempty(securityConnectorId)\r\n| where selectedSecurityConnectors has securityConnectorId\r\n| where assessmentsCount <> 1\r\n| project   resourceName,\r\n                            resourceType,\r\n                            resourceId,\r\n                            environment, subscriptionId\r\n| extend resourceGroup = tolower(tostring(split(resourceId, \"/\")[4]))\r\n| order by resourceId, resourceName\r\n| where resourceType in ('microsoft.security/securityconnectors/computeinstances')\r\n| join kind = leftouter\r\n    (resources\r\n    | where type == 'microsoft.hybridcompute/machines'\r\n    | extend machineFqdn=tostring(properties.machineFqdn)\r\n    | project machineFqdn\r\n)  on $left.resourceName == $right.machineFqdn\r\n| where machineFqdn == ''\r\n",
              "size": 0,
              "queryType": 1,
              "resourceType": "microsoft.resourcegraph/resources",
              "crossComponentResources": [
                "value::selected"
              ],
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "machineFqdn",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "name",
                    "formatter": 5
                  }
                ]
              }
            },
            "name": "query - 1"
          }
        ]
      },
      "conditionalVisibility": {
        "parameterName": "SelectedTab",
        "comparison": "isEqualTo",
        "value": "GCP"
      },
      "name": "GCP"
    }
  ],
  "fallbackResourceIds": [
    "azure monitor"
  ],
  "$schema": "https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json"
}
